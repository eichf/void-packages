diff -r -up libtirpc-0.3.2.org/configure.ac libtirpc-0.3.2/configure.ac
--- configure.ac	2015-06-16 17:35:08.000000000 +0200
+++ configure.ac	2015-08-19 22:02:17.094796496 +0200
@@ -7,6 +7,8 @@ AC_PROG_CC
 
 AC_CHECK_HEADER([gssapi/gssapi.h], [HAVE_GSSAPI_H=yes], [HAVE_GSSAPI_H=no])
 
+AC_CHECK_HEADER([rpcsvc/yp_prot.h], [HAVE_YP_PROT_H=yes], [HAVE_YP_PROT_H=no])
+AM_CONDITIONAL(HAVE_YP_PROT_H, test x$HAVE_YP_PROT_H = xyes)
 AC_ARG_ENABLE(gssapi,
 	[AC_HELP_STRING([--disable-gssapi], [Disable GSSAPI support @<:@default=no@:>@])],
       [],[enable_gssapi=yes])
diff -r -up libtirpc-0.3.2.org/src/Makefile.am libtirpc-0.3.2/src/Makefile.am
--- src/Makefile.am	2015-06-16 17:35:08.000000000 +0200
+++ src/Makefile.am	2015-08-19 22:08:02.241770664 +0200
@@ -51,7 +51,11 @@ libtirpc_la_SOURCES = auth_none.c auth_u
         rpc_callmsg.c rpc_generic.c rpc_soc.c rpcb_clnt.c rpcb_prot.c \
         rpcb_st_xdr.c svc.c svc_auth.c svc_dg.c svc_auth_unix.c svc_auth_none.c \
         svc_generic.c svc_raw.c svc_run.c svc_simple.c svc_vc.c getpeereid.c \
-        auth_time.c auth_des.c authdes_prot.c debug.c
+        debug.c
+
+if HAVE_YP_PROT_H
+libtirpc_la_SOURCES += auth_time.c auth_des.c authdes_prot.c
+endif
 
 ## XDR
 libtirpc_la_SOURCES += xdr.c xdr_rec.c xdr_array.c xdr_float.c xdr_mem.c xdr_reference.c xdr_stdio.c
@@ -68,8 +72,11 @@ if GSS
     libtirpc_la_CFLAGS = -DHAVE_RPCSEC_GSS $(GSSAPI_CFLAGS)
 endif
 
+if HAVE_YP_PROT_H
 libtirpc_la_SOURCES += key_call.c key_prot_xdr.c getpublickey.c
-libtirpc_la_SOURCES += netname.c netnamer.c rtime.c
+libtirpc_la_SOURCES += netname.c netnamer.c rpcdname.c rtime.c
+endif
+
 
 CLEANFILES	       = cscope.* *~
 DISTCLEANFILES	       = Makefile.in
diff -Naur a/src/rpcdname.c b/src/rpcdname.c
--- src/rpcdname.c	1970-01-01 01:00:00.000000000 +0100
+++ src/rpcdname.c	2015-06-17 21:23:05.186276982 +0200
@@ -0,0 +1,72 @@
+/*
+ * Copyright (c) 2009, Sun Microsystems, Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ * - Redistributions of source code must retain the above copyright notice,
+ *   this list of conditions and the following disclaimer.
+ * - Redistributions in binary form must reproduce the above copyright notice,
+ *   this list of conditions and the following disclaimer in the documentation
+ *   and/or other materials provided with the distribution.
+ * - Neither the name of Sun Microsystems, Inc. nor the names of its
+ *   contributors may be used to endorse or promote products derived
+ *   from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+/*
+ * rpcdname.c
+ * Gets the default domain name
+ */
+
+#include <stdlib.h>
+#include <unistd.h>
+#include <string.h>
+
+static char *default_domain = 0;
+
+static char *
+get_default_domain()
+{
+	char temp[256];
+
+	if (default_domain)
+		return (default_domain);
+	if (getdomainname(temp, sizeof(temp)) < 0)
+		return (0);
+	if ((int) strlen(temp) > 0) {
+		default_domain = (char *)malloc((strlen(temp)+(unsigned)1));
+		if (default_domain == 0)
+			return (0);
+		(void) strcpy(default_domain, temp);
+		return (default_domain);
+	}
+	return (0);
+}
+
+/*
+ * This is a wrapper for the system call getdomainname which returns a
+ * ypclnt.h error code in the failure case.  It also checks to see that
+ * the domain name is non-null, knowing that the null string is going to
+ * get rejected elsewhere in the NIS client package.
+ */
+int
+__rpc_get_default_domain(domain)
+	char **domain;
+{
+	if ((*domain = get_default_domain()) != 0)
+		return (0);
+	return (-1);
+}
--- src/rpc_soc.c	2016-01-08 14:58:32.342790730 -0800
+++ src/rpc_soc.c	2016-01-08 15:00:40.997863321 -0800
@@ -520,6 +520,8 @@
 	    (resultproc_t) rpc_wrap_bcast, "udp");
 }
 
+#ifdef HAVE_YP_PROT_H
+
 /*
  * Create the client des authentication object. Obsoleted by
  * authdes_seccreate().
@@ -552,6 +554,8 @@
 	return (dummy);
 }
 
+#endif
+
 /*
  * Create a client handle for a unix connection. Obsoleted by clnt_vc_create()
  */
